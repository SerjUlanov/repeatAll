/*
операторы управления потоком, можно условно разделить на две категории:
   условные выражения или ветвления (if, if...else, switch) - обеспечивают ветвление пути
   циклы(while, do...while, for) - повторяют выполнение тела операторов, пока соблюдается условие

Исключения в управлении потоком:
break - немедленное прервыние цикла
continue -переход к следующему шагу в цикле
return - выход из текущей функции ( возврат значения )
throw - вызывает исключение в программе, которое следует обработать - обработчиком исключений

следующий код, отражает суть ветвлений ( дополнение к игре )
если бы Игрок, ставил по средам (3), только 1 монету, и если он достает ровно 7 монет, то ставит сразу все.

if ( new Date().getDay() === 3 ){
   totalBet = 1;
} else if (funds ===7 ) {
   totalBet = funds;
} else {
   console.log("Без суеверий");
}

Операторы:
   while ( если условие верно, выполняет оператор)
whlie(условие)
   оператор

   if...else ( проверяет условия по порядку на истину, и выполняет оператор первой истины)
if(условие)
   оператор1
[else
   оператор2]

   do...while ( сначала выполняет оператор, потом проверяет условие)
do
   оператор
while(условие)

   for ( перед выполнение создает внутреннюю переменную, проверяет её на условие true, если true то отрабатывает оператор, манипулирует внутренней переменной, повторяет цикл.)
for([инициализация]; [условие]; [заключительное_выражение])
   оператор

   интерпертаор Набора Фибоначчи
   for (let temp, i = 0, j = 1; j < 100; temp = i, i = j, j = i + temp) {
   console.log(temp);
   }

   как видно из примера выше, может быть создано, сразу несколько переменных, так же, может быть несколько условий, и несколько заключительных выражение. 
   Пока будет true, все они будут отрабатывать.
*/
